package api

import (
	"net/http"

	"github.com/go-chi/chi"
	"github.com/go-chi/chi/middleware"
	"github.com/go-chi/cors"
	"github.com/go-chi/render"
	_ "github.com/menemsalama/simplenote-go/api/docs" // docs is generated by Swag CLI, you have to import it.
	"github.com/menemsalama/simplenote-go/api/handlers"
	"github.com/menemsalama/simplenote-go/internal/auth"
	"github.com/swaggo/http-swagger"
)

var corsOptions = cors.Options{
	// AllowedOrigins: []string{"https://foo.com"}, // Use this to allow specific origin hosts
	AllowedOrigins: []string{"*"},
	// AllowOriginFunc:  func(r *http.Request, origin string) bool { return true },
	AllowedMethods:   []string{"GET", "POST", "PUT", "DELETE", "OPTIONS"},
	AllowedHeaders:   []string{"Accept", "Authorization", "Content-Type", "X-CSRF-Token"},
	ExposedHeaders:   []string{"Link"},
	AllowCredentials: true,
	MaxAge:           300, // Maximum value not ignored by any of major browsers
}

var apiCors = cors.New(corsOptions)

var authMiddlewares = []func(http.Handler) http.Handler{
	auth.VerifierHandler(),
	auth.AuthenticatorHandler,
}

// NewAPI instantiates a new REST API
// @title simplenote
// @description simplenote-go swagger documentation
// @schemes http https
// @securityDefinitions.apikey BearerAuth
// @in header
// @name Authorization
func NewAPI() *chi.Mux {
	router := chi.NewRouter()

	router.Use(
		apiCors.Handler,
		middleware.Logger,
		middleware.DefaultCompress,
		middleware.RedirectSlashes,
		render.SetContentType(render.ContentTypeJSON),
		middleware.Recoverer,
	)

	// routes that requires auth
	privateRouter := router.With(authMiddlewares...)

	/*

	 public routes

	*/

	// defaults
	router.Get("/ping", handlers.Ping)
	router.Get("/swagger/*", httpSwagger.Handler(
		httpSwagger.URL("/swagger/doc.json"), //The url pointing to API definition"
	))

	// auth
	router.Post("/auth/signin", handlers.Signin)

	// users
	router.Post("/users", handlers.CreateUser)

	/*

		private routes
		that requires JWT Authorization header

	*/

	// users
	privateRouter.Get("/users", handlers.ListUsers)
	privateRouter.Get("/users/{id}", handlers.GetUser)

	// notes
	privateRouter.Route("/notes", func(r chi.Router) {
		r.Get("/", handlers.ListNoteshandler)
		// r.Get("/{id}", handlers.GetNote)
		r.Post("/", handlers.CreateNote)
		r.Patch("/{id}", handlers.UpdateNotehandler)
	})

	return router
}
